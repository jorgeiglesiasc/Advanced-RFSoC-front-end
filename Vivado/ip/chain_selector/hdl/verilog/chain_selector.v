// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="chain_selector_chain_selector,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu48dr-ffvg1517-2-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.997000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=69,HLS_SYN_LUT=173,HLS_VERSION=2022_1}" *)

module chain_selector (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_in0_dout,
        data_in0_empty_n,
        data_in0_read,
        data_in1_dout,
        data_in1_empty_n,
        data_in1_read,
        data_in2_dout,
        data_in2_empty_n,
        data_in2_read,
        data_in3_dout,
        data_in3_empty_n,
        data_in3_read,
        data_out_din,
        data_out_full_n,
        data_out_write,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_in0_dout;
input   data_in0_empty_n;
output   data_in0_read;
input  [15:0] data_in1_dout;
input   data_in1_empty_n;
output   data_in1_read;
input  [15:0] data_in2_dout;
input   data_in2_empty_n;
output   data_in2_read;
input  [15:0] data_in3_dout;
input   data_in3_empty_n;
output   data_in3_read;
output  [15:0] data_out_din;
input   data_out_full_n;
output   data_out_write;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_in0_read;
reg data_in1_read;
reg data_in2_read;
reg data_in3_read;
reg[15:0] data_out_din;
reg data_out_write;

 reg    ap_rst_n_inv;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    s0;
wire    s1;
wire    s2;
wire    s3;
reg    data_in0_blk_n;
wire    ap_CS_fsm_state2;
reg    data_in1_blk_n;
wire    ap_CS_fsm_state3;
reg    data_in2_blk_n;
wire    ap_CS_fsm_state4;
reg    data_in3_blk_n;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_reg_147;
reg    data_out_blk_n;
reg   [0:0] s0_read_reg_143;
reg   [0:0] s1_read_reg_139;
reg   [0:0] s2_read_reg_135;
reg   [0:0] s3_read_reg_131;
wire   [0:0] grp_nbreadreq_fu_88_p3;
reg    ap_block_state1;
reg    ap_block_state2;
reg    ap_block_state3;
reg    ap_block_state4;
reg    ap_predicate_op52_write_state5;
reg    ap_block_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

chain_selector_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .s0(s0),
    .s1(s1),
    .s2(s2),
    .s3(s3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((tmp_reg_147 == 1'd1) & (data_in3_empty_n == 1'b0)) | ((data_out_full_n == 1'b0) & (ap_predicate_op52_write_state5 == 1'b1))) & (1'b1 == ap_CS_fsm_state5) & ((tmp_reg_147 == 1'd0) | (grp_nbreadreq_fu_88_p3 == 1'd0)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        s0_read_reg_143 <= s0;
        s1_read_reg_139 <= s1;
        s2_read_reg_135 <= s2;
        s3_read_reg_131 <= s3;
        tmp_reg_147 <= grp_nbreadreq_fu_88_p3;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((data_in0_empty_n == 1'b0) | ((s0_read_reg_143 == 1'd1) & (data_out_full_n == 1'b0)))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((data_in1_empty_n == 1'b0) | ((s1_read_reg_139 == 1'd1) & (data_out_full_n == 1'b0)))) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((data_in2_empty_n == 1'b0) | ((s2_read_reg_135 == 1'd1) & (data_out_full_n == 1'b0)))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_147 == 1'd1) & (data_in3_empty_n == 1'b0)) | ((data_out_full_n == 1'b0) & (ap_predicate_op52_write_state5 == 1'b1)))) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~(((tmp_reg_147 == 1'd1) & (data_in3_empty_n == 1'b0)) | ((data_out_full_n == 1'b0) & (ap_predicate_op52_write_state5 == 1'b1))) & (1'b1 == ap_CS_fsm_state5) & ((tmp_reg_147 == 1'd0) | (grp_nbreadreq_fu_88_p3 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((tmp_reg_147 == 1'd1) & (data_in3_empty_n == 1'b0)) | ((data_out_full_n == 1'b0) & (ap_predicate_op52_write_state5 == 1'b1))) & (1'b1 == ap_CS_fsm_state5) & ((tmp_reg_147 == 1'd0) | (grp_nbreadreq_fu_88_p3 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_in0_blk_n = data_in0_empty_n;
    end else begin
        data_in0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data_in0_empty_n == 1'b0) | ((s0_read_reg_143 == 1'd1) & (data_out_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        data_in0_read = 1'b1;
    end else begin
        data_in0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_in1_blk_n = data_in1_empty_n;
    end else begin
        data_in1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data_in1_empty_n == 1'b0) | ((s1_read_reg_139 == 1'd1) & (data_out_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        data_in1_read = 1'b1;
    end else begin
        data_in1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_in2_blk_n = data_in2_empty_n;
    end else begin
        data_in2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data_in2_empty_n == 1'b0) | ((s2_read_reg_135 == 1'd1) & (data_out_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state4))) begin
        data_in2_read = 1'b1;
    end else begin
        data_in2_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_147 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        data_in3_blk_n = data_in3_empty_n;
    end else begin
        data_in3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((tmp_reg_147 == 1'd1) & (data_in3_empty_n == 1'b0)) | ((data_out_full_n == 1'b0) & (ap_predicate_op52_write_state5 == 1'b1))) & (tmp_reg_147 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        data_in3_read = 1'b1;
    end else begin
        data_in3_read = 1'b0;
    end
end

always @ (*) begin
    if ((((s3_read_reg_131 == 1'd1) & (tmp_reg_147 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((s2_read_reg_135 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((s1_read_reg_139 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((s0_read_reg_143 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        data_out_blk_n = data_out_full_n;
    end else begin
        data_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((tmp_reg_147 == 1'd1) & (data_in3_empty_n == 1'b0)) | ((data_out_full_n == 1'b0) & (ap_predicate_op52_write_state5 == 1'b1))) & (1'b1 == ap_CS_fsm_state5) & (ap_predicate_op52_write_state5 == 1'b1))) begin
        data_out_din = data_in3_dout;
    end else if ((~((data_in2_empty_n == 1'b0) | ((s2_read_reg_135 == 1'd1) & (data_out_full_n == 1'b0))) & (s2_read_reg_135 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        data_out_din = data_in2_dout;
    end else if ((~((data_in1_empty_n == 1'b0) | ((s1_read_reg_139 == 1'd1) & (data_out_full_n == 1'b0))) & (s1_read_reg_139 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_out_din = data_in1_dout;
    end else if ((~((data_in0_empty_n == 1'b0) | ((s0_read_reg_143 == 1'd1) & (data_out_full_n == 1'b0))) & (s0_read_reg_143 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        data_out_din = data_in0_dout;
    end else begin
        data_out_din = 'bx;
    end
end

always @ (*) begin
    if (((~(((tmp_reg_147 == 1'd1) & (data_in3_empty_n == 1'b0)) | ((data_out_full_n == 1'b0) & (ap_predicate_op52_write_state5 == 1'b1))) & (1'b1 == ap_CS_fsm_state5) & (ap_predicate_op52_write_state5 == 1'b1)) | (~((data_in2_empty_n == 1'b0) | ((s2_read_reg_135 == 1'd1) & (data_out_full_n == 1'b0))) & (s2_read_reg_135 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | (~((data_in1_empty_n == 1'b0) | ((s1_read_reg_139 == 1'd1) & (data_out_full_n == 1'b0))) & (s1_read_reg_139 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | (~((data_in0_empty_n == 1'b0) | ((s0_read_reg_143 == 1'd1) & (data_out_full_n == 1'b0))) & (s0_read_reg_143 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        data_out_write = 1'b1;
    end else begin
        data_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (grp_nbreadreq_fu_88_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (grp_nbreadreq_fu_88_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((data_in0_empty_n == 1'b0) | ((s0_read_reg_143 == 1'd1) & (data_out_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((data_in1_empty_n == 1'b0) | ((s1_read_reg_139 == 1'd1) & (data_out_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((data_in2_empty_n == 1'b0) | ((s2_read_reg_135 == 1'd1) & (data_out_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~(((tmp_reg_147 == 1'd1) & (data_in3_empty_n == 1'b0)) | ((data_out_full_n == 1'b0) & (ap_predicate_op52_write_state5 == 1'b1))) & (1'b1 == ap_CS_fsm_state5) & ((tmp_reg_147 == 1'd0) | (grp_nbreadreq_fu_88_p3 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((tmp_reg_147 == 1'd1) & (data_in3_empty_n == 1'b0)) | ((data_out_full_n == 1'b0) & (ap_predicate_op52_write_state5 == 1'b1))) & (tmp_reg_147 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (grp_nbreadreq_fu_88_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((data_in0_empty_n == 1'b0) | ((s0_read_reg_143 == 1'd1) & (data_out_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3 = ((data_in1_empty_n == 1'b0) | ((s1_read_reg_139 == 1'd1) & (data_out_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4 = ((data_in2_empty_n == 1'b0) | ((s2_read_reg_135 == 1'd1) & (data_out_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5 = (((tmp_reg_147 == 1'd1) & (data_in3_empty_n == 1'b0)) | ((data_out_full_n == 1'b0) & (ap_predicate_op52_write_state5 == 1'b1)));
end

always @ (*) begin
    ap_predicate_op52_write_state5 = ((s3_read_reg_131 == 1'd1) & (tmp_reg_147 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_nbreadreq_fu_88_p3 = data_in0_empty_n;

endmodule //chain_selector
